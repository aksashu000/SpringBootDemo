"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionType = exports.PostFunctionType = exports.PreFunctionType = void 0;
var jsx_runtime_1 = require("@emotion/react/jsx-runtime");
/**
 * Use NoSsr on function value.
 *  Because in Next.js SSR, the function will be translated to other type
 */
var material_1 = require("@mui/material");
var JsonViewerStore_1 = require("../../stores/JsonViewerStore");
var DataTypeLabel_1 = require("../DataTypeLabel");
var functionBody = function (func) {
    var funcString = func.toString();
    var isUsualFunction = true;
    var parenthesisPos = funcString.indexOf(')');
    var arrowPos = funcString.indexOf('=>');
    if (arrowPos !== -1 && arrowPos > parenthesisPos) {
        isUsualFunction = false;
    }
    if (isUsualFunction) {
        return funcString.substring(funcString.indexOf('{', parenthesisPos) + 1, funcString.lastIndexOf('}'));
    }
    return funcString.substring(funcString.indexOf('=>') + 2);
};
var functionName = function (func) {
    var funcString = func.toString();
    var isUsualFunction = funcString.indexOf('function') !== -1;
    if (isUsualFunction) {
        return funcString.substring(8, funcString.indexOf('{')).trim();
    }
    return funcString.substring(0, funcString.indexOf('=>') + 2).trim();
};
var lb = '{';
var rb = '}';
var PreFunctionType = function (props) {
    return ((0, jsx_runtime_1.jsxs)(material_1.NoSsr, { children: [(0, jsx_runtime_1.jsx)(DataTypeLabel_1.DataTypeLabel, { dataType: 'function' }), (0, jsx_runtime_1.jsxs)(material_1.Box, __assign({ component: 'span', className: 'data-function-start', sx: {
                    letterSpacing: 0.5
                } }, { children: [functionName(props.value), ' ', lb] }))] }));
};
exports.PreFunctionType = PreFunctionType;
var PostFunctionType = function () {
    return ((0, jsx_runtime_1.jsx)(material_1.NoSsr, { children: (0, jsx_runtime_1.jsx)(material_1.Box, __assign({ component: 'span', className: 'data-function-end' }, { children: rb })) }));
};
exports.PostFunctionType = PostFunctionType;
var FunctionType = function (props) {
    var functionColor = (0, JsonViewerStore_1.useJsonViewerStore)(function (store) { return store.colorspace.base05; });
    return ((0, jsx_runtime_1.jsx)(material_1.NoSsr, { children: (0, jsx_runtime_1.jsx)(material_1.Box, __assign({ className: 'data-function', sx: {
                display: props.inspect ? 'block' : 'inline-block',
                pl: props.inspect ? 2 : 0,
                color: functionColor
            } }, { children: props.inspect
                ? functionBody(props.value)
                : ((0, jsx_runtime_1.jsx)(material_1.Box, __assign({ component: 'span', className: 'data-function-body', onClick: function () { return props.setInspect(true); }, sx: {
                        '&:hover': { cursor: 'pointer' },
                        padding: 0.5
                    } }, { children: "\u2026" }))) })) }));
};
exports.FunctionType = FunctionType;

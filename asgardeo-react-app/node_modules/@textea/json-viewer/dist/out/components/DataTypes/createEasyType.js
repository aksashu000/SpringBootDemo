"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createEasyType = void 0;
var jsx_runtime_1 = require("@emotion/react/jsx-runtime");
var material_1 = require("@mui/material");
var react_1 = require("react");
var JsonViewerStore_1 = require("../../stores/JsonViewerStore");
var DataTypeLabel_1 = require("../DataTypeLabel");
var DataBox_1 = require("../mui/DataBox");
function createEasyType(type, renderValue, config) {
    var fromString = config.fromString, colorKey = config.colorKey, _a = config.displayTypeLabel, displayTypeLabel = _a === void 0 ? true : _a;
    var Render = (0, react_1.memo)(renderValue);
    var EasyType = function (props) {
        var storeDisplayDataTypes = (0, JsonViewerStore_1.useJsonViewerStore)(function (store) { return store.displayDataTypes; });
        var color = (0, JsonViewerStore_1.useJsonViewerStore)(function (store) { return store.colorspace[colorKey]; });
        var onSelect = (0, JsonViewerStore_1.useJsonViewerStore)(function (store) { return store.onSelect; });
        return ((0, jsx_runtime_1.jsxs)(DataBox_1.DataBox, __assign({ onClick: function () { return onSelect === null || onSelect === void 0 ? void 0 : onSelect(props.path, props.value); }, sx: { color: color } }, { children: [(displayTypeLabel && storeDisplayDataTypes) && (0, jsx_runtime_1.jsx)(DataTypeLabel_1.DataTypeLabel, { dataType: type }), (0, jsx_runtime_1.jsx)(DataBox_1.DataBox, __assign({ className: "".concat(type, "-value") }, { children: (0, jsx_runtime_1.jsx)(Render, { value: props.value }) }))] })));
    };
    EasyType.displayName = "easy-".concat(type, "-type");
    if (!fromString) {
        return {
            Component: EasyType
        };
    }
    var EasyTypeEditor = function (_a) {
        var value = _a.value, setValue = _a.setValue;
        var color = (0, JsonViewerStore_1.useJsonViewerStore)(function (store) { return store.colorspace[colorKey]; });
        return ((0, jsx_runtime_1.jsx)(material_1.InputBase, { value: value, onChange: (0, react_1.useCallback)(function (event) {
                var value = fromString(event.target.value);
                setValue(value);
            }, [setValue]), size: 'small', multiline: true, sx: {
                color: color,
                padding: 0.5,
                borderStyle: 'solid',
                borderColor: 'black',
                borderWidth: 1,
                fontSize: '0.8rem',
                fontFamily: 'monospace',
                display: 'inline-flex'
            } }));
    };
    EasyTypeEditor.displayName = "easy-".concat(type, "-type-editor");
    return {
        Component: EasyType,
        Editor: EasyTypeEditor
    };
}
exports.createEasyType = createEasyType;

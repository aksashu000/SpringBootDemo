import type { SetStateAction } from 'react';
import type { StoreApi } from 'zustand';
import type { JsonViewerOnChange, JsonViewerOnCopy, JsonViewerOnSelect, JsonViewerProps, Path } from '..';
import type { Colorspace } from '../theme/base16';
import type { JsonViewerKeyRenderer } from '../type';
export type JsonViewerState<T = unknown> = {
    inspectCache: Record<string, boolean>;
    hoverPath: {
        path: Path;
        nestedIndex?: number;
    } | null;
    indentWidth: number;
    groupArraysAfterLength: number;
    enableClipboard: boolean;
    highlightUpdates: boolean;
    maxDisplayLength: number;
    defaultInspectDepth: number;
    collapseStringsAfterLength: number;
    objectSortKeys: boolean | ((a: string, b: string) => number);
    quotesOnKeys: boolean;
    colorspace: Colorspace;
    editable: boolean | (<U>(path: Path, currentValue: U) => boolean);
    displayDataTypes: boolean;
    rootName: false | string;
    prevValue: T | undefined;
    value: T;
    onChange: JsonViewerOnChange;
    onCopy: JsonViewerOnCopy | undefined;
    onSelect: JsonViewerOnSelect | undefined;
    keyRenderer: JsonViewerKeyRenderer;
    displayObjectSize: boolean;
    getInspectCache: (path: Path, nestedIndex?: number) => boolean;
    setInspectCache: (path: Path, action: SetStateAction<boolean>, nestedIndex?: number) => void;
    setHover: (path: Path | null, nestedIndex?: number) => void;
};
export declare const createJsonViewerStore: <T = unknown>(props: JsonViewerProps<T>) => import("zustand").UseBoundStore<StoreApi<JsonViewerState<unknown>>>;
export declare const JsonViewerStoreContext: import("react").Context<StoreApi<JsonViewerState<unknown>>>;
export declare const JsonViewerProvider: import("react").Provider<StoreApi<JsonViewerState<unknown>>>;
export declare const useJsonViewerStore: <U extends unknown>(selector: (state: JsonViewerState) => U, equalityFn?: ((a: U, b: U) => boolean) | undefined) => U;

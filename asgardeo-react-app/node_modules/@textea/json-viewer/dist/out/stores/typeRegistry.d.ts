import type { SetStateAction } from 'react';
import type { StoreApi } from 'zustand';
import type { DataType, Path } from '../type';
type TypeRegistryState = {
    registry: DataType<any>[];
    registerTypes: (setState: SetStateAction<DataType<any>[]>) => void;
};
export declare const createTypeRegistryStore: () => StoreApi<TypeRegistryState>;
export declare const TypeRegistryStoreContext: import("react").Context<StoreApi<TypeRegistryState>>;
export declare const TypeRegistryProvider: import("react").Provider<StoreApi<TypeRegistryState>>;
export declare const useTypeRegistryStore: <U extends unknown>(selector: (state: TypeRegistryState) => U, equalityFn?: ((a: U, b: U) => boolean) | undefined) => U;
export declare function useTypeComponents(value: unknown, path: Path): DataType<unknown>;
export declare function predefined(): DataType<any>[];
export {};

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useInspect = void 0;
var react_1 = require("react");
var JsonViewerStore_1 = require("../stores/JsonViewerStore");
var useIsCycleReference_1 = require("./useIsCycleReference");
function useInspect(path, value, nestedIndex) {
    var depth = path.length;
    var isTrap = (0, useIsCycleReference_1.useIsCycleReference)(path, value);
    var getInspectCache = (0, JsonViewerStore_1.useJsonViewerStore)(function (store) { return store.getInspectCache; });
    var setInspectCache = (0, JsonViewerStore_1.useJsonViewerStore)(function (store) { return store.setInspectCache; });
    var defaultInspectDepth = (0, JsonViewerStore_1.useJsonViewerStore)(function (store) { return store.defaultInspectDepth; });
    (0, react_1.useEffect)(function () {
        var inspect = getInspectCache(path, nestedIndex);
        if (inspect !== undefined) {
            return;
        }
        if (nestedIndex !== undefined) {
            setInspectCache(path, false, nestedIndex);
        }
        else {
            // do not inspect when it is a cycle reference, otherwise there will have a loop
            var inspect_1 = isTrap
                ? false
                : depth < defaultInspectDepth;
            setInspectCache(path, inspect_1);
        }
    }, [defaultInspectDepth, depth, getInspectCache, isTrap, nestedIndex, path, setInspectCache]);
    var _a = (0, react_1.useState)(function () {
        var shouldInspect = getInspectCache(path, nestedIndex);
        if (shouldInspect !== undefined) {
            return shouldInspect;
        }
        if (nestedIndex !== undefined) {
            return false;
        }
        return isTrap
            ? false
            : depth < defaultInspectDepth;
    }), inspect = _a[0], set = _a[1];
    var setInspect = (0, react_1.useCallback)(function (apply) {
        set(function (oldState) {
            var newState = typeof apply === 'boolean' ? apply : apply(oldState);
            setInspectCache(path, newState, nestedIndex);
            return newState;
        });
    }, [nestedIndex, path, setInspectCache]);
    return [inspect, setInspect];
}
exports.useInspect = useInspect;

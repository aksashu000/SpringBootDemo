"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useClipboard = void 0;
var react_1 = require("react");
var JsonViewerStore_1 = require("../stores/JsonViewerStore");
var utils_1 = require("../utils");
/**
 * useClipboard hook accepts one argument options in which copied status timeout duration is defined (defaults to 2000). Hook returns object with properties:
 * - copy – function to copy value to clipboard
 * - copied – value that indicates that copy handler was called less than options.timeout ms ago
 * - reset – function to clear timeout and reset copied to false
 */
function useClipboard(_a) {
    var _this = this;
    var _b = _a === void 0 ? {} : _a, _c = _b.timeout, timeout = _c === void 0 ? 2000 : _c;
    var _d = (0, react_1.useState)(false), copied = _d[0], setCopied = _d[1];
    var copyTimeout = (0, react_1.useRef)(null);
    var handleCopyResult = (0, react_1.useCallback)(function (value) {
        var current = copyTimeout.current;
        if (current) {
            window.clearTimeout(current);
        }
        copyTimeout.current = window.setTimeout(function () { return setCopied(false); }, timeout);
        setCopied(value);
    }, [timeout]);
    var onCopy = (0, JsonViewerStore_1.useJsonViewerStore)(function (store) { return store.onCopy; });
    var copy = (0, react_1.useCallback)(function (path, value) { return __awaiter(_this, void 0, void 0, function () {
        var error_1, valueToCopy, error_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(typeof onCopy === 'function')) return [3 /*break*/, 5];
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, onCopy(path, value, utils_1.copyString)];
                case 2:
                    _a.sent();
                    handleCopyResult(true);
                    return [3 /*break*/, 4];
                case 3:
                    error_1 = _a.sent();
                    console.error("error when copy ".concat(path.length === 0
                        ? 'src'
                        : "src[".concat(path.join('.')), "]"), error_1);
                    return [3 /*break*/, 4];
                case 4: return [3 /*break*/, 8];
                case 5:
                    _a.trys.push([5, 7, , 8]);
                    valueToCopy = (0, utils_1.safeStringify)(typeof value === 'function' ? value.toString() : value, '  ');
                    return [4 /*yield*/, (0, utils_1.copyString)(valueToCopy)];
                case 6:
                    _a.sent();
                    handleCopyResult(true);
                    return [3 /*break*/, 8];
                case 7:
                    error_2 = _a.sent();
                    console.error("error when copy ".concat(path.length === 0
                        ? 'src'
                        : "src[".concat(path.join('.')), "]"), error_2);
                    return [3 /*break*/, 8];
                case 8: return [2 /*return*/];
            }
        });
    }); }, [handleCopyResult, onCopy]);
    var reset = (0, react_1.useCallback)(function () {
        setCopied(false);
        if (copyTimeout.current) {
            clearTimeout(copyTimeout.current);
        }
    }, []);
    return { copy: copy, reset: reset, copied: copied };
}
exports.useClipboard = useClipboard;

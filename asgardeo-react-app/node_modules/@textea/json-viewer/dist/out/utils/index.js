"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.copyString = exports.safeStringify = exports.segmentArray = exports.getValueSize = exports.isCycleReference = exports.createDataType = exports.applyValue = void 0;
var copy_to_clipboard_1 = require("copy-to-clipboard");
// reference: https://github.com/immerjs/immer/blob/main/src/utils/common.ts
var objectCtorString = Object.prototype.constructor.toString();
function isPlainObject(value) {
    if (!value || typeof value !== 'object')
        return false;
    var proto = Object.getPrototypeOf(value);
    if (proto === null)
        return true;
    var Ctor = Object.hasOwnProperty.call(proto, 'constructor') && proto.constructor;
    if (Ctor === Object)
        return true;
    return typeof Ctor === 'function' && Function.toString.call(Ctor) === objectCtorString;
}
function shouldShallowCopy(value) {
    if (!value)
        return false;
    return (isPlainObject(value) ||
        Array.isArray(value) ||
        value instanceof Map ||
        value instanceof Set);
}
function shallowCopy(value) {
    if (Array.isArray(value))
        return Array.prototype.slice.call(value);
    if (value instanceof Set)
        return new Set(value);
    if (value instanceof Map)
        return new Map(value);
    if (typeof value === 'object' && value !== null) {
        return Object.assign({}, value);
    }
    return value;
}
function applyValue(input, path, value) {
    if (typeof input !== 'object' || input === null) {
        if (path.length !== 0) {
            throw new Error('path is incorrect');
        }
        return value;
    }
    var shouldCopy = shouldShallowCopy(input);
    if (shouldCopy)
        input = shallowCopy(input);
    var key = path[0], restPath = path.slice(1);
    if (key !== undefined) {
        if (key === '__proto__') {
            throw new TypeError('Modification of prototype is not allowed');
        }
        if (restPath.length > 0) {
            input[key] = applyValue(input[key], restPath, value);
        }
        else {
            input[key] = value;
        }
    }
    return input;
}
exports.applyValue = applyValue;
function createDataType(is, Component, Editor, PreComponent, PostComponent) {
    return {
        is: is,
        Component: Component,
        Editor: Editor,
        PreComponent: PreComponent,
        PostComponent: PostComponent
    };
}
exports.createDataType = createDataType;
var isCycleReference = function (root, path, value) {
    if (root === null || value === null) {
        return false;
    }
    if (typeof root !== 'object') {
        return false;
    }
    if (typeof value !== 'object') {
        return false;
    }
    if (Object.is(root, value) && path.length !== 0) {
        return '';
    }
    var currentPath = [];
    var arr = __spreadArray([], path, true);
    var currentRoot = root;
    while (currentRoot !== value || arr.length !== 0) {
        if (typeof currentRoot !== 'object' || currentRoot === null) {
            return false;
        }
        if (Object.is(currentRoot, value)) {
            return currentPath.reduce(function (path, value, currentIndex) {
                if (typeof value === 'number') {
                    return path + "[".concat(value, "]");
                }
                return path + "".concat(currentIndex === 0 ? '' : '.').concat(value);
            }, '');
        }
        var target = arr.shift();
        currentPath.push(target);
        currentRoot = currentRoot[target];
    }
    return false;
};
exports.isCycleReference = isCycleReference;
function getValueSize(value) {
    if (value === null || undefined) {
        return 0;
    }
    else if (Array.isArray(value)) {
        return value.length;
    }
    else if (value instanceof Map || value instanceof Set) {
        return value.size;
    }
    else if (value instanceof Date) {
        return 1;
    }
    else if (typeof value === 'object') {
        return Object.keys(value).length;
    }
    else if (typeof value === 'string') {
        return value.length;
    }
    return 1;
}
exports.getValueSize = getValueSize;
function segmentArray(arr, size) {
    var result = [];
    var index = 0;
    while (index < arr.length) {
        result.push(arr.slice(index, index + size));
        index += size;
    }
    return result;
}
exports.segmentArray = segmentArray;
/**
 * A safe version of `JSON.stringify` that handles circular references and BigInts.
 *
 * *This function might be changed in the future to support more types. Use it with caution.*
 *
 * @param obj A JavaScript value, usually an object or array, to be converted.
 * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
 * @returns
 */
function safeStringify(obj, space) {
    var seenValues = [];
    function replacer(key, value) {
        // https://github.com/GoogleChromeLabs/jsbi/issues/30
        if (typeof value === 'bigint')
            return value.toString();
        // Map and Set are not supported by JSON.stringify
        if (value instanceof Map) {
            if ('toJSON' in value && typeof value.toJSON === 'function')
                return value.toJSON();
            if (value.size === 0)
                return {};
            if (seenValues.includes(value))
                return '[Circular]';
            seenValues.push(value);
            var entries = Array.from(value.entries());
            if (entries.every(function (_a) {
                var key = _a[0];
                return typeof key === 'string' || typeof key === 'number';
            })) {
                return Object.fromEntries(entries);
            }
            // if keys are not string or number, we can't convert to object
            // fallback to default behavior
            return {};
        }
        if (value instanceof Set) {
            if ('toJSON' in value && typeof value.toJSON === 'function')
                return value.toJSON();
            if (seenValues.includes(value))
                return '[Circular]';
            seenValues.push(value);
            return Array.from(value.values());
        }
        // https://stackoverflow.com/a/72457899
        if (typeof value === 'object' && value !== null && Object.keys(value).length) {
            var stackSize = seenValues.length;
            if (stackSize) {
                // clean up expired references
                for (var n = stackSize - 1; n >= 0 && seenValues[n][key] !== value; --n) {
                    seenValues.pop();
                }
                if (seenValues.includes(value))
                    return '[Circular]';
            }
            seenValues.push(value);
        }
        return value;
    }
    return JSON.stringify(obj, replacer, space);
}
exports.safeStringify = safeStringify;
function copyString(value) {
    return __awaiter(this, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!('clipboard' in navigator)) return [3 /*break*/, 4];
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, navigator.clipboard.writeText(value)];
                case 2:
                    _b.sent();
                    return [3 /*break*/, 4];
                case 3:
                    _a = _b.sent();
                    return [3 /*break*/, 4];
                case 4:
                    // fallback to copy-to-clipboard when navigator.clipboard is not available
                    (0, copy_to_clipboard_1.default)(value);
                    return [2 /*return*/];
            }
        });
    });
}
exports.copyString = copyString;

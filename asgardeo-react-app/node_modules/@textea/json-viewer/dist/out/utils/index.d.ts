import type { ComponentType } from 'react';
import type { DataItemProps, EditorProps, Path } from '../type';
export declare function applyValue(input: any, path: (string | number)[], value: any): any;
export declare function createDataType<ValueType = unknown>(is: (value: unknown, path: Path) => boolean, Component: ComponentType<DataItemProps<ValueType>>): {
    is: (value: unknown, path: Path) => boolean;
    Component: ComponentType<DataItemProps<ValueType>>;
};
export declare function createDataType<ValueType = unknown>(is: (value: unknown, path: Path) => boolean, Component: ComponentType<DataItemProps<ValueType>>, Editor: ComponentType<EditorProps<ValueType>>): {
    is: (value: unknown, path: Path) => boolean;
    Component: ComponentType<DataItemProps<ValueType>>;
    Editor: ComponentType<DataItemProps<ValueType>>;
};
export declare function createDataType<ValueType = unknown>(is: (value: unknown, path: Path) => boolean, Component: ComponentType<DataItemProps<ValueType>>, Editor: undefined, PreComponent: ComponentType<DataItemProps<ValueType>>, PostComponent: ComponentType<DataItemProps<ValueType>>): {
    is: (value: unknown, path: Path) => boolean;
    Component: ComponentType<DataItemProps<ValueType>>;
    PreComponent: ComponentType<DataItemProps<ValueType>>;
    PostComponent: ComponentType<DataItemProps<ValueType>>;
};
export declare function createDataType<ValueType = unknown>(is: (value: unknown, path: Path) => boolean, Component: ComponentType<DataItemProps<ValueType>>, Editor: ComponentType<EditorProps<ValueType>>, PreComponent: ComponentType<DataItemProps<ValueType>>, PostComponent: ComponentType<DataItemProps<ValueType>>): {
    is: (value: unknown, path: Path) => boolean;
    Component: ComponentType<DataItemProps<ValueType>>;
    Editor: ComponentType<DataItemProps<ValueType>>;
    PreComponent: ComponentType<DataItemProps<ValueType>>;
    PostComponent: ComponentType<DataItemProps<ValueType>>;
};
export declare const isCycleReference: (root: any, path: (string | number)[], value: unknown) => false | string;
export declare function getValueSize(value: any): number;
export declare function segmentArray<T>(arr: T[], size: number): T[][];
/**
 * A safe version of `JSON.stringify` that handles circular references and BigInts.
 *
 * *This function might be changed in the future to support more types. Use it with caution.*
 *
 * @param obj A JavaScript value, usually an object or array, to be converted.
 * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
 * @returns
 */
export declare function safeStringify(obj: any, space?: string | number): string;
export declare function copyString(value: string): Promise<void>;

/// <reference types="./index.d.ts" />
import { jsx, jsxs, Fragment } from '@emotion/react/jsx-runtime';
import { Box, InputBase, NoSsr, SvgIcon, createTheme, ThemeProvider, Paper } from '@mui/material';
import { createContext, useContext, useState, useRef, useCallback, useMemo, useEffect, memo } from 'react';
import { create, useStore, createStore } from 'zustand';
import copyToClipboard from 'copy-to-clipboard';

function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
    } else obj[key] = value;

    return obj;
}

function _object_spread(target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);

        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(
                Object.getOwnPropertySymbols(source).filter(function(sym) {
                    return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                })
            );
        }

        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }

    return target;
}

function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }

    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};

    if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }

    return target;
}

function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
}

function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}

function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) {
        return Array.from(iter);
    }
}

function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);

    var n = Object.prototype.toString.call(o).slice(8, -1);

    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}

function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}

function r(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=" "),n+=f);else for(t in e)e[t]&&(n&&(n+=" "),n+=t);return n}function clsx(){for(var e,t,f=0,n="";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=" "),n+=t);return n}

function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}

function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

    if (_i == null) return;

    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;

    try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally {
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally {
            if (_d) throw _e;
        }
    }

    return _arr;
}

function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}

function _type_of(obj) {
    "@swc/helpers - typeof";

    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}

var lightColorspace = {
    scheme: "Light Theme",
    author: "mac gainor (https://github.com/mac-s-g)",
    base00: "rgba(0, 0, 0, 0)",
    base01: "rgb(245, 245, 245)",
    base02: "rgb(235, 235, 235)",
    base03: "#93a1a1",
    base04: "rgba(0, 0, 0, 0.3)",
    base05: "#586e75",
    base06: "#073642",
    base07: "#002b36",
    base08: "#d33682",
    base09: "#cb4b16",
    base0A: "#ffd500",
    base0B: "#859900",
    base0C: "#6c71c4",
    base0D: "#586e75",
    base0E: "#2aa198",
    base0F: "#268bd2"
};
var darkColorspace = {
    scheme: "Dark Theme",
    author: "Chris Kempson (http://chriskempson.com)",
    base00: "#181818",
    base01: "#282828",
    base02: "#383838",
    base03: "#585858",
    base04: "#b8b8b8",
    base05: "#d8d8d8",
    base06: "#e8e8e8",
    base07: "#f8f8f8",
    base08: "#ab4642",
    base09: "#dc9656",
    base0A: "#f7ca88",
    base0B: "#a1b56c",
    base0C: "#86c1b9",
    base0D: "#7cafc2",
    base0E: "#ba8baf",
    base0F: "#a16946"
};

var DefaultKeyRenderer = function() {
    return null;
};
DefaultKeyRenderer.when = function() {
    return false;
};
var createJsonViewerStore = function(props) {
    var _props_enableClipboard, _props_highlightUpdates, _props_indentWidth, _props_groupArraysAfterLength, _props_collapseStringsAfterLength, _props_maxDisplayLength, _props_rootName, _props_onChange, _props_onCopy, _props_onSelect, _props_keyRenderer, _props_editable, _props_defaultInspectDepth, _props_objectSortKeys, _props_quotesOnKeys, _props_displayDataTypes, _props_displayObjectSize;
    return create()(function(set, get) {
        return {
            // provided by user
            enableClipboard: (_props_enableClipboard = props.enableClipboard) !== null && _props_enableClipboard !== void 0 ? _props_enableClipboard : true,
            highlightUpdates: (_props_highlightUpdates = props.highlightUpdates) !== null && _props_highlightUpdates !== void 0 ? _props_highlightUpdates : false,
            indentWidth: (_props_indentWidth = props.indentWidth) !== null && _props_indentWidth !== void 0 ? _props_indentWidth : 3,
            groupArraysAfterLength: (_props_groupArraysAfterLength = props.groupArraysAfterLength) !== null && _props_groupArraysAfterLength !== void 0 ? _props_groupArraysAfterLength : 100,
            collapseStringsAfterLength: props.collapseStringsAfterLength === false ? Number.MAX_VALUE : (_props_collapseStringsAfterLength = props.collapseStringsAfterLength) !== null && _props_collapseStringsAfterLength !== void 0 ? _props_collapseStringsAfterLength : 50,
            maxDisplayLength: (_props_maxDisplayLength = props.maxDisplayLength) !== null && _props_maxDisplayLength !== void 0 ? _props_maxDisplayLength : 30,
            rootName: (_props_rootName = props.rootName) !== null && _props_rootName !== void 0 ? _props_rootName : "root",
            onChange: (_props_onChange = props.onChange) !== null && _props_onChange !== void 0 ? _props_onChange : function() {},
            onCopy: (_props_onCopy = props.onCopy) !== null && _props_onCopy !== void 0 ? _props_onCopy : undefined,
            onSelect: (_props_onSelect = props.onSelect) !== null && _props_onSelect !== void 0 ? _props_onSelect : undefined,
            keyRenderer: (_props_keyRenderer = props.keyRenderer) !== null && _props_keyRenderer !== void 0 ? _props_keyRenderer : DefaultKeyRenderer,
            editable: (_props_editable = props.editable) !== null && _props_editable !== void 0 ? _props_editable : false,
            defaultInspectDepth: (_props_defaultInspectDepth = props.defaultInspectDepth) !== null && _props_defaultInspectDepth !== void 0 ? _props_defaultInspectDepth : 5,
            objectSortKeys: (_props_objectSortKeys = props.objectSortKeys) !== null && _props_objectSortKeys !== void 0 ? _props_objectSortKeys : false,
            quotesOnKeys: (_props_quotesOnKeys = props.quotesOnKeys) !== null && _props_quotesOnKeys !== void 0 ? _props_quotesOnKeys : true,
            displayDataTypes: (_props_displayDataTypes = props.displayDataTypes) !== null && _props_displayDataTypes !== void 0 ? _props_displayDataTypes : true,
            // internal state
            inspectCache: {},
            hoverPath: null,
            colorspace: lightColorspace,
            value: props.value,
            prevValue: undefined,
            displayObjectSize: (_props_displayObjectSize = props.displayObjectSize) !== null && _props_displayObjectSize !== void 0 ? _props_displayObjectSize : true,
            getInspectCache: function(path, nestedIndex) {
                var target = nestedIndex !== undefined ? path.join(".") + "[".concat(nestedIndex, "]nt") : path.join(".");
                return get().inspectCache[target];
            },
            setInspectCache: function(path, action, nestedIndex) {
                var target = nestedIndex !== undefined ? path.join(".") + "[".concat(nestedIndex, "]nt") : path.join(".");
                set(function(state) {
                    return {
                        inspectCache: _object_spread_props(_object_spread({}, state.inspectCache), _define_property({}, target, typeof action === "function" ? action(state.inspectCache[target]) : action))
                    };
                });
            },
            setHover: function(path, nestedIndex) {
                set({
                    hoverPath: path ? {
                        path: path,
                        nestedIndex: nestedIndex
                    } : null
                });
            }
        };
    });
};
// @ts-expect-error we intentionally want to pass undefined to the context
// See https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24509#issuecomment-382213106
var JsonViewerStoreContext = createContext(undefined);
JsonViewerStoreContext.Provider;
var useJsonViewerStore = function(selector, equalityFn) {
    var store = useContext(JsonViewerStoreContext);
    return useStore(store, selector, equalityFn);
};

var useTextColor = function() {
    return useJsonViewerStore(function(store) {
        return store.colorspace.base07;
    });
};

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) resolve(value);
    else Promise.resolve(value).then(_next, _throw);
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;

        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);

            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }

            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }

            _next(undefined);
        });
    };
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else return left instanceof right;
}

function _to_array(arr) {
    return _array_with_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_rest();
}

// reference: https://github.com/immerjs/immer/blob/main/src/utils/common.ts
var objectCtorString = Object.prototype.constructor.toString();
function isPlainObject(value) {
    if (!value || typeof value !== "object") return false;
    var proto = Object.getPrototypeOf(value);
    if (proto === null) return true;
    var Ctor = Object.hasOwnProperty.call(proto, "constructor") && proto.constructor;
    if (Ctor === Object) return true;
    return typeof Ctor === "function" && Function.toString.call(Ctor) === objectCtorString;
}
function shouldShallowCopy(value) {
    if (!value) return false;
    return isPlainObject(value) || Array.isArray(value) || _instanceof(value, Map) || _instanceof(value, Set);
}
function shallowCopy(value) {
    if (Array.isArray(value)) return Array.prototype.slice.call(value);
    if (_instanceof(value, Set)) return new Set(value);
    if (_instanceof(value, Map)) return new Map(value);
    if (typeof value === "object" && value !== null) {
        return Object.assign({}, value);
    }
    return value;
}
function applyValue(input, path, value) {
    if (typeof input !== "object" || input === null) {
        if (path.length !== 0) {
            throw new Error("path is incorrect");
        }
        return value;
    }
    var shouldCopy = shouldShallowCopy(input);
    if (shouldCopy) input = shallowCopy(input);
    var _path = _to_array(path), key = _path[0], restPath = _path.slice(1);
    if (key !== undefined) {
        if (key === "__proto__") {
            throw new TypeError("Modification of prototype is not allowed");
        }
        if (restPath.length > 0) {
            input[key] = applyValue(input[key], restPath, value);
        } else {
            input[key] = value;
        }
    }
    return input;
}
function createDataType(is, Component, Editor, PreComponent, PostComponent) {
    return {
        is: is,
        Component: Component,
        Editor: Editor,
        PreComponent: PreComponent,
        PostComponent: PostComponent
    };
}
var isCycleReference = function(root, path, value) {
    if (root === null || value === null) {
        return false;
    }
    if (typeof root !== "object") {
        return false;
    }
    if (typeof value !== "object") {
        return false;
    }
    if (Object.is(root, value) && path.length !== 0) {
        return "";
    }
    var currentPath = [];
    var arr = _to_consumable_array(path);
    var currentRoot = root;
    while(currentRoot !== value || arr.length !== 0){
        if (typeof currentRoot !== "object" || currentRoot === null) {
            return false;
        }
        if (Object.is(currentRoot, value)) {
            return currentPath.reduce(function(path, value, currentIndex) {
                if (typeof value === "number") {
                    return path + "[".concat(value, "]");
                }
                return path + "".concat(currentIndex === 0 ? "" : ".").concat(value);
            }, "");
        }
        var target = arr.shift();
        currentPath.push(target);
        currentRoot = currentRoot[target];
    }
    return false;
};
function getValueSize(value) {
    if (value === null || undefined) {
        return 0;
    } else if (Array.isArray(value)) {
        return value.length;
    } else if (_instanceof(value, Map) || _instanceof(value, Set)) {
        return value.size;
    } else if (_instanceof(value, Date)) {
        return 1;
    } else if (typeof value === "object") {
        return Object.keys(value).length;
    } else if (typeof value === "string") {
        return value.length;
    }
    return 1;
}
function segmentArray(arr, size) {
    var result = [];
    var index = 0;
    while(index < arr.length){
        result.push(arr.slice(index, index + size));
        index += size;
    }
    return result;
}
/**
 * A safe version of `JSON.stringify` that handles circular references and BigInts.
 *
 * *This function might be changed in the future to support more types. Use it with caution.*
 *
 * @param obj A JavaScript value, usually an object or array, to be converted.
 * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
 * @returns
 */ function safeStringify(obj, space) {
    var replacer = function replacer(key, value) {
        // https://github.com/GoogleChromeLabs/jsbi/issues/30
        if ((typeof value === "undefined" ? "undefined" : _type_of(value)) === "bigint") return value.toString();
        // Map and Set are not supported by JSON.stringify
        if (_instanceof(value, Map)) {
            if ("toJSON" in value && typeof value.toJSON === "function") return value.toJSON();
            if (value.size === 0) return {};
            if (seenValues.includes(value)) return "[Circular]";
            seenValues.push(value);
            var entries = Array.from(value.entries());
            if (entries.every(function(param) {
                var _param = _sliced_to_array(param, 1), _$key = _param[0];
                return typeof _$key === "string" || typeof _$key === "number";
            })) {
                return Object.fromEntries(entries);
            }
            // if keys are not string or number, we can't convert to object
            // fallback to default behavior
            return {};
        }
        if (_instanceof(value, Set)) {
            if ("toJSON" in value && typeof value.toJSON === "function") return value.toJSON();
            if (seenValues.includes(value)) return "[Circular]";
            seenValues.push(value);
            return Array.from(value.values());
        }
        // https://stackoverflow.com/a/72457899
        if (typeof value === "object" && value !== null && Object.keys(value).length) {
            var stackSize = seenValues.length;
            if (stackSize) {
                // clean up expired references
                for(var n = stackSize - 1; n >= 0 && seenValues[n][key] !== value; --n){
                    seenValues.pop();
                }
                if (seenValues.includes(value)) return "[Circular]";
            }
            seenValues.push(value);
        }
        return value;
    };
    var seenValues = [];
    return JSON.stringify(obj, replacer, space);
}
function copyString(value) {
    return _copyString.apply(this, arguments);
}
function _copyString() {
    _copyString = _async_to_generator(function(value) {
        return __generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (!("clipboard" in navigator)) return [
                        3,
                        4
                    ];
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        3,
                        ,
                        4
                    ]);
                    return [
                        4,
                        navigator.clipboard.writeText(value)
                    ];
                case 2:
                    _state.sent();
                    return [
                        3,
                        4
                    ];
                case 3:
                    _state.sent();
                    return [
                        3,
                        4
                    ];
                case 4:
                    // fallback to copy-to-clipboard when navigator.clipboard is not available
                    copyToClipboard(value);
                    return [
                        2
                    ];
            }
        });
    });
    return _copyString.apply(this, arguments);
}

/**
 * useClipboard hook accepts one argument options in which copied status timeout duration is defined (defaults to 2000). Hook returns object with properties:
 * - copy – function to copy value to clipboard
 * - copied – value that indicates that copy handler was called less than options.timeout ms ago
 * - reset – function to clear timeout and reset copied to false
 */ function useClipboard() {
    var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref_timeout = _ref.timeout, timeout = _ref_timeout === void 0 ? 2000 : _ref_timeout;
    var _useState = _sliced_to_array(useState(false), 2), copied = _useState[0], setCopied = _useState[1];
    var copyTimeout = useRef(null);
    var handleCopyResult = useCallback(function(value) {
        var current = copyTimeout.current;
        if (current) {
            window.clearTimeout(current);
        }
        copyTimeout.current = window.setTimeout(function() {
            return setCopied(false);
        }, timeout);
        setCopied(value);
    }, [
        timeout
    ]);
    var onCopy = useJsonViewerStore(function(store) {
        return store.onCopy;
    });
    var copy = useCallback(function() {
        var _ref = _async_to_generator(function(path, value) {
            var error, valueToCopy, error1;
            return __generator(this, function(_state) {
                switch(_state.label){
                    case 0:
                        if (!(typeof onCopy === "function")) return [
                            3,
                            5
                        ];
                        _state.label = 1;
                    case 1:
                        _state.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4,
                            onCopy(path, value, copyString)
                        ];
                    case 2:
                        _state.sent();
                        handleCopyResult(true);
                        return [
                            3,
                            4
                        ];
                    case 3:
                        error = _state.sent();
                        console.error("error when copy ".concat(path.length === 0 ? "src" : "src[".concat(path.join(".")), "]"), error);
                        return [
                            3,
                            4
                        ];
                    case 4:
                        return [
                            3,
                            8
                        ];
                    case 5:
                        _state.trys.push([
                            5,
                            7,
                            ,
                            8
                        ]);
                        valueToCopy = safeStringify(typeof value === "function" ? value.toString() : value, "  ");
                        return [
                            4,
                            copyString(valueToCopy)
                        ];
                    case 6:
                        _state.sent();
                        handleCopyResult(true);
                        return [
                            3,
                            8
                        ];
                    case 7:
                        error1 = _state.sent();
                        console.error("error when copy ".concat(path.length === 0 ? "src" : "src[".concat(path.join(".")), "]"), error1);
                        return [
                            3,
                            8
                        ];
                    case 8:
                        return [
                            2
                        ];
                }
            });
        });
        return function(path, value) {
            return _ref.apply(this, arguments);
        };
    }(), [
        handleCopyResult,
        onCopy
    ]);
    var reset = useCallback(function() {
        setCopied(false);
        if (copyTimeout.current) {
            clearTimeout(copyTimeout.current);
        }
    }, []);
    return {
        copy: copy,
        reset: reset,
        copied: copied
    };
}

function useIsCycleReference(path, value) {
    var rootValue = useJsonViewerStore(function(store) {
        return store.value;
    });
    return useMemo(function() {
        return isCycleReference(rootValue, path, value);
    }, [
        path,
        value,
        rootValue
    ]);
}

function useInspect(path, value, nestedIndex) {
    var depth = path.length;
    var isTrap = useIsCycleReference(path, value);
    var getInspectCache = useJsonViewerStore(function(store) {
        return store.getInspectCache;
    });
    var setInspectCache = useJsonViewerStore(function(store) {
        return store.setInspectCache;
    });
    var defaultInspectDepth = useJsonViewerStore(function(store) {
        return store.defaultInspectDepth;
    });
    useEffect(function() {
        var inspect = getInspectCache(path, nestedIndex);
        if (inspect !== undefined) {
            return;
        }
        if (nestedIndex !== undefined) {
            setInspectCache(path, false, nestedIndex);
        } else {
            // do not inspect when it is a cycle reference, otherwise there will have a loop
            var inspect1 = isTrap ? false : depth < defaultInspectDepth;
            setInspectCache(path, inspect1);
        }
    }, [
        defaultInspectDepth,
        depth,
        getInspectCache,
        isTrap,
        nestedIndex,
        path,
        setInspectCache
    ]);
    var _useState = _sliced_to_array(useState(function() {
        var shouldInspect = getInspectCache(path, nestedIndex);
        if (shouldInspect !== undefined) {
            return shouldInspect;
        }
        if (nestedIndex !== undefined) {
            return false;
        }
        return isTrap ? false : depth < defaultInspectDepth;
    }), 2), inspect = _useState[0], set = _useState[1];
    var setInspect = useCallback(function(apply) {
        set(function(oldState) {
            var newState = typeof apply === "boolean" ? apply : apply(oldState);
            setInspectCache(path, newState, nestedIndex);
            return newState;
        });
    }, [
        nestedIndex,
        path,
        setInspectCache
    ]);
    return [
        inspect,
        setInspect
    ];
}

var DataBox = function(props) {
    return /*#__PURE__*/ jsx(Box, _object_spread_props(_object_spread({
        component: "div"
    }, props), {
        sx: _object_spread({
            display: "inline-block"
        }, props.sx)
    }));
};

var DataTypeLabel = function(param) {
    var dataType = param.dataType, _param_enable = param.enable, enable = _param_enable === void 0 ? true : _param_enable;
    if (!enable) return null;
    return /*#__PURE__*/ jsx(DataBox, {
        className: "data-type-label",
        sx: {
            mx: 0.5,
            fontSize: "0.7rem",
            opacity: 0.8,
            userSelect: "none"
        },
        children: dataType
    });
};

function createEasyType(type, renderValue, config) {
    var fromString = config.fromString, colorKey = config.colorKey, _config_displayTypeLabel = config.displayTypeLabel, displayTypeLabel = _config_displayTypeLabel === void 0 ? true : _config_displayTypeLabel;
    var Render = /*#__PURE__*/ memo(renderValue);
    var EasyType = function(props) {
        var storeDisplayDataTypes = useJsonViewerStore(function(store) {
            return store.displayDataTypes;
        });
        var color = useJsonViewerStore(function(store) {
            return store.colorspace[colorKey];
        });
        var onSelect = useJsonViewerStore(function(store) {
            return store.onSelect;
        });
        return /*#__PURE__*/ jsxs(DataBox, {
            onClick: function() {
                return onSelect === null || onSelect === void 0 ? void 0 : onSelect(props.path, props.value);
            },
            sx: {
                color: color
            },
            children: [
                displayTypeLabel && storeDisplayDataTypes && /*#__PURE__*/ jsx(DataTypeLabel, {
                    dataType: type
                }),
                /*#__PURE__*/ jsx(DataBox, {
                    className: "".concat(type, "-value"),
                    children: /*#__PURE__*/ jsx(Render, {
                        value: props.value
                    })
                })
            ]
        });
    };
    EasyType.displayName = "easy-".concat(type, "-type");
    if (!fromString) {
        return {
            Component: EasyType
        };
    }
    var EasyTypeEditor = function(param) {
        var value = param.value, setValue = param.setValue;
        var color = useJsonViewerStore(function(store) {
            return store.colorspace[colorKey];
        });
        return /*#__PURE__*/ jsx(InputBase, {
            value: value,
            onChange: useCallback(function(event) {
                var value = fromString(event.target.value);
                setValue(value);
            }, [
                setValue
            ]),
            size: "small",
            multiline: true,
            sx: {
                color: color,
                padding: 0.5,
                borderStyle: "solid",
                borderColor: "black",
                borderWidth: 1,
                fontSize: "0.8rem",
                fontFamily: "monospace",
                display: "inline-flex"
            }
        });
    };
    EasyTypeEditor.displayName = "easy-".concat(type, "-type-editor");
    return {
        Component: EasyType,
        Editor: EasyTypeEditor
    };
}

var functionBody = function(func) {
    var funcString = func.toString();
    var isUsualFunction = true;
    var parenthesisPos = funcString.indexOf(")");
    var arrowPos = funcString.indexOf("=>");
    if (arrowPos !== -1 && arrowPos > parenthesisPos) {
        isUsualFunction = false;
    }
    if (isUsualFunction) {
        return funcString.substring(funcString.indexOf("{", parenthesisPos) + 1, funcString.lastIndexOf("}"));
    }
    return funcString.substring(funcString.indexOf("=>") + 2);
};
var functionName = function(func) {
    var funcString = func.toString();
    var isUsualFunction = funcString.indexOf("function") !== -1;
    if (isUsualFunction) {
        return funcString.substring(8, funcString.indexOf("{")).trim();
    }
    return funcString.substring(0, funcString.indexOf("=>") + 2).trim();
};
var lb = "{";
var rb = "}";
var PreFunctionType = function(props) {
    return /*#__PURE__*/ jsxs(NoSsr, {
        children: [
            /*#__PURE__*/ jsx(DataTypeLabel, {
                dataType: "function"
            }),
            /*#__PURE__*/ jsxs(Box, {
                component: "span",
                className: "data-function-start",
                sx: {
                    letterSpacing: 0.5
                },
                children: [
                    functionName(props.value),
                    " ",
                    lb
                ]
            })
        ]
    });
};
var PostFunctionType = function() {
    return /*#__PURE__*/ jsx(NoSsr, {
        children: /*#__PURE__*/ jsx(Box, {
            component: "span",
            className: "data-function-end",
            children: rb
        })
    });
};
var FunctionType = function(props) {
    var functionColor = useJsonViewerStore(function(store) {
        return store.colorspace.base05;
    });
    return /*#__PURE__*/ jsx(NoSsr, {
        children: /*#__PURE__*/ jsx(Box, {
            className: "data-function",
            sx: {
                display: props.inspect ? "block" : "inline-block",
                pl: props.inspect ? 2 : 0,
                color: functionColor
            },
            children: props.inspect ? functionBody(props.value) : /*#__PURE__*/ jsx(Box, {
                component: "span",
                className: "data-function-body",
                onClick: function() {
                    return props.setInspect(true);
                },
                sx: {
                    "&:hover": {
                        cursor: "pointer"
                    },
                    padding: 0.5
                },
                children: "…"
            })
        })
    });
};

function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};

    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }

    return target;
}

function _object_without_properties(source, excluded) {
    if (source == null) return {};

    var target = _object_without_properties_loose(source, excluded);
    var key, i;

    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }

    return target;
}

var BaseIcon = function(_param) {
    var d = _param.d, props = _object_without_properties(_param, [
        "d"
    ]);
    return /*#__PURE__*/ jsx(SvgIcon, _object_spread_props(_object_spread({}, props), {
        children: /*#__PURE__*/ jsx("path", {
            d: d
        })
    }));
};
var Check = "M9 16.17 4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z";
var ChevronRight = "M10 6 8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z";
var CircularArrows = "M 12 2 C 10.615 1.998 9.214625 2.2867656 7.890625 2.8847656 L 8.9003906 4.6328125 C 9.9043906 4.2098125 10.957 3.998 12 4 C 15.080783 4 17.738521 5.7633175 19.074219 8.3222656 L 17.125 9 L 21.25 11 L 22.875 7 L 20.998047 7.6523438 C 19.377701 4.3110398 15.95585 2 12 2 z M 6.5097656 4.4882812 L 2.2324219 5.0820312 L 3.734375 6.3808594 C 1.6515335 9.4550558 1.3615962 13.574578 3.3398438 17 C 4.0308437 18.201 4.9801562 19.268234 6.1601562 20.115234 L 7.1699219 18.367188 C 6.3019219 17.710187 5.5922656 16.904 5.0722656 16 C 3.5320014 13.332354 3.729203 10.148679 5.2773438 7.7128906 L 6.8398438 9.0625 L 6.5097656 4.4882812 z M 19.929688 13 C 19.794687 14.08 19.450734 15.098 18.927734 16 C 17.386985 18.668487 14.531361 20.090637 11.646484 19.966797 L 12.035156 17.9375 L 8.2402344 20.511719 L 10.892578 23.917969 L 11.265625 21.966797 C 14.968963 22.233766 18.681899 20.426323 20.660156 17 C 21.355156 15.801 21.805219 14.445 21.949219 13 L 19.929688 13 z";
var Close = "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z";
var ContentCopy = "M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z";
var Edit = "M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z";
var ExpandMore = "M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z";
var CheckIcon = function(props) {
    return /*#__PURE__*/ jsx(BaseIcon, _object_spread({
        d: Check
    }, props));
};
var ChevronRightIcon = function(props) {
    return /*#__PURE__*/ jsx(BaseIcon, _object_spread({
        d: ChevronRight
    }, props));
};
var CircularArrowsIcon = function(props) {
    return /*#__PURE__*/ jsx(BaseIcon, _object_spread({
        d: CircularArrows
    }, props));
};
var CloseIcon = function(props) {
    return /*#__PURE__*/ jsx(BaseIcon, _object_spread({
        d: Close
    }, props));
};
var ContentCopyIcon = function(props) {
    return /*#__PURE__*/ jsx(BaseIcon, _object_spread({
        d: ContentCopy
    }, props));
};
var EditIcon = function(props) {
    return /*#__PURE__*/ jsx(BaseIcon, _object_spread({
        d: Edit
    }, props));
};
var ExpandMoreIcon = function(props) {
    return /*#__PURE__*/ jsx(BaseIcon, _object_spread({
        d: ExpandMore
    }, props));
};

var objectLb = "{";
var arrayLb = "[";
var objectRb = "}";
var arrayRb = "]";
function inspectMetadata(value) {
    var length = getValueSize(value);
    var name = "";
    if (_instanceof(value, Map) || _instanceof(value, Set)) {
        name = value[Symbol.toStringTag];
    }
    if (Object.prototype.hasOwnProperty.call(value, Symbol.toStringTag)) {
        name = value[Symbol.toStringTag];
    }
    return "".concat(length, " Items").concat(name ? " (".concat(name, ")") : "");
}
var PreObjectType = function(props) {
    var metadataColor = useJsonViewerStore(function(store) {
        return store.colorspace.base04;
    });
    var textColor = useTextColor();
    var isArray = useMemo(function() {
        return Array.isArray(props.value);
    }, [
        props.value
    ]);
    var isEmptyValue = useMemo(function() {
        return getValueSize(props.value) === 0;
    }, [
        props.value
    ]);
    var sizeOfValue = useMemo(function() {
        return inspectMetadata(props.value);
    }, [
        props.value
    ]);
    var displayObjectSize = useJsonViewerStore(function(store) {
        return store.displayObjectSize;
    });
    var isTrap = useIsCycleReference(props.path, props.value);
    return /*#__PURE__*/ jsxs(Box, {
        component: "span",
        className: "data-object-start",
        sx: {
            letterSpacing: 0.5
        },
        children: [
            isArray ? arrayLb : objectLb,
            displayObjectSize && props.inspect && !isEmptyValue && /*#__PURE__*/ jsx(Box, {
                component: "span",
                sx: {
                    pl: 0.5,
                    fontStyle: "italic",
                    color: metadataColor,
                    userSelect: "none"
                },
                children: sizeOfValue
            }),
            isTrap && !props.inspect && /*#__PURE__*/ jsxs(Fragment, {
                children: [
                    /*#__PURE__*/ jsx(CircularArrowsIcon, {
                        sx: {
                            fontSize: 12,
                            color: textColor,
                            mx: 0.5
                        }
                    }),
                    isTrap
                ]
            })
        ]
    });
};
var PostObjectType = function(props) {
    var metadataColor = useJsonViewerStore(function(store) {
        return store.colorspace.base04;
    });
    var isArray = useMemo(function() {
        return Array.isArray(props.value);
    }, [
        props.value
    ]);
    var displayObjectSize = useJsonViewerStore(function(store) {
        return store.displayObjectSize;
    });
    var isEmptyValue = useMemo(function() {
        return getValueSize(props.value) === 0;
    }, [
        props.value
    ]);
    var sizeOfValue = useMemo(function() {
        return inspectMetadata(props.value);
    }, [
        props.value
    ]);
    return /*#__PURE__*/ jsxs(Box, {
        component: "span",
        className: "data-object-end",
        children: [
            isArray ? arrayRb : objectRb,
            displayObjectSize && (isEmptyValue || !props.inspect) ? /*#__PURE__*/ jsx(Box, {
                component: "span",
                sx: {
                    pl: 0.5,
                    fontStyle: "italic",
                    color: metadataColor,
                    userSelect: "none"
                },
                children: sizeOfValue
            }) : null
        ]
    });
};
function getIterator(value) {
    return typeof (value === null || value === void 0 ? void 0 : value[Symbol.iterator]) === "function";
}
var ObjectType = function(props) {
    var keyColor = useTextColor();
    var borderColor = useJsonViewerStore(function(store) {
        return store.colorspace.base02;
    });
    var groupArraysAfterLength = useJsonViewerStore(function(store) {
        return store.groupArraysAfterLength;
    });
    var isTrap = useIsCycleReference(props.path, props.value);
    var _useState = _sliced_to_array(useState(useJsonViewerStore(function(store) {
        return store.maxDisplayLength;
    })), 2), displayLength = _useState[0], setDisplayLength = _useState[1];
    var objectSortKeys = useJsonViewerStore(function(store) {
        return store.objectSortKeys;
    });
    var elements = useMemo(function() {
        if (!props.inspect) {
            return null;
        }
        var value = props.value;
        var iterator = getIterator(value);
        // Array also has iterator, we skip it and treat it as an array as normal.
        if (iterator && !Array.isArray(value)) {
            var elements = [];
            if (_instanceof(value, Map)) {
                value.forEach(function(value, k) {
                    // fixme: key might be a object, array, or any value for the `Map<any, any>`
                    var key = k.toString();
                    var path = _to_consumable_array(props.path).concat([
                        key
                    ]);
                    elements.push(/*#__PURE__*/ jsx(DataKeyPair, {
                        path: path,
                        value: value,
                        prevValue: _instanceof(props.prevValue, Map) ? props.prevValue.get(k) : undefined,
                        editable: false
                    }, key));
                });
            } else {
                // iterate with iterator func
                var iterator1 = value[Symbol.iterator]();
                var result = iterator1.next();
                var count = 0;
                while(!result.done){
                    elements.push(/*#__PURE__*/ jsx(DataKeyPair, {
                        path: _to_consumable_array(props.path).concat([
                            "iterator:".concat(count)
                        ]),
                        value: result.value,
                        nestedIndex: count,
                        editable: false
                    }, count));
                    count++;
                    result = iterator1.next();
                }
            }
            return elements;
        }
        if (Array.isArray(value)) {
            // unknown[]
            if (value.length <= groupArraysAfterLength) {
                var elements1 = value.slice(0, displayLength).map(function(value, index) {
                    var path = _to_consumable_array(props.path).concat([
                        index
                    ]);
                    return /*#__PURE__*/ jsx(DataKeyPair, {
                        path: path,
                        value: value,
                        prevValue: Array.isArray(props.prevValue) ? props.prevValue[index] : undefined
                    }, index);
                });
                if (value.length > displayLength) {
                    var rest = value.length - displayLength;
                    elements1.push(/*#__PURE__*/ jsxs(DataBox, {
                        sx: {
                            cursor: "pointer",
                            lineHeight: 1.5,
                            color: keyColor,
                            letterSpacing: 0.5,
                            opacity: 0.8,
                            userSelect: "none"
                        },
                        onClick: function() {
                            return setDisplayLength(function(length) {
                                return length * 2;
                            });
                        },
                        children: [
                            "hidden ",
                            rest,
                            " items…"
                        ]
                    }, "last"));
                }
                return elements1;
            }
            var elements2 = segmentArray(value, groupArraysAfterLength);
            var prevElements = Array.isArray(props.prevValue) ? segmentArray(props.prevValue, groupArraysAfterLength) : undefined;
            return elements2.map(function(list, index) {
                var path = _to_consumable_array(props.path);
                return /*#__PURE__*/ jsx(DataKeyPair, {
                    path: path,
                    value: list,
                    nestedIndex: index,
                    prevValue: prevElements === null || prevElements === void 0 ? void 0 : prevElements[index]
                }, index);
            });
        }
        // object
        var entries = Object.entries(value);
        if (objectSortKeys) {
            entries = objectSortKeys === true ? entries.sort(function(param, param1) {
                var _param = _sliced_to_array(param, 1), a = _param[0], _param1 = _sliced_to_array(param1, 1), b = _param1[0];
                return a.localeCompare(b);
            }) : entries.sort(function(param, param1) {
                var _param = _sliced_to_array(param, 1), a = _param[0], _param1 = _sliced_to_array(param1, 1), b = _param1[0];
                return objectSortKeys(a, b);
            });
        }
        var elements3 = entries.slice(0, displayLength).map(function(param) {
            var _param = _sliced_to_array(param, 2), key = _param[0], value = _param[1];
            var _props_prevValue;
            var path = _to_consumable_array(props.path).concat([
                key
            ]);
            return /*#__PURE__*/ jsx(DataKeyPair, {
                path: path,
                value: value,
                prevValue: (_props_prevValue = props.prevValue) === null || _props_prevValue === void 0 ? void 0 : _props_prevValue[key]
            }, key);
        });
        if (entries.length > displayLength) {
            var rest1 = entries.length - displayLength;
            elements3.push(/*#__PURE__*/ jsxs(DataBox, {
                sx: {
                    cursor: "pointer",
                    lineHeight: 1.5,
                    color: keyColor,
                    letterSpacing: 0.5,
                    opacity: 0.8,
                    userSelect: "none"
                },
                onClick: function() {
                    return setDisplayLength(function(length) {
                        return length * 2;
                    });
                },
                children: [
                    "hidden ",
                    rest1,
                    " items…"
                ]
            }, "last"));
        }
        return elements3;
    }, [
        props.inspect,
        props.value,
        props.prevValue,
        props.path,
        groupArraysAfterLength,
        displayLength,
        keyColor,
        objectSortKeys
    ]);
    var marginLeft = props.inspect ? 0.6 : 0;
    var width = useJsonViewerStore(function(store) {
        return store.indentWidth;
    });
    var indentWidth = props.inspect ? width - marginLeft : width;
    var isEmptyValue = useMemo(function() {
        return getValueSize(props.value) === 0;
    }, [
        props.value
    ]);
    if (isEmptyValue) {
        return null;
    }
    return /*#__PURE__*/ jsx(Box, {
        className: "data-object",
        sx: {
            display: props.inspect ? "block" : "inline-block",
            pl: props.inspect ? indentWidth - 0.6 : 0,
            marginLeft: marginLeft,
            color: keyColor,
            borderLeft: props.inspect ? "1px solid ".concat(borderColor) : "none"
        },
        children: props.inspect ? elements : !isTrap && /*#__PURE__*/ jsx(Box, {
            component: "span",
            className: "data-object-body",
            onClick: function() {
                return props.setInspect(true);
            },
            sx: {
                "&:hover": {
                    cursor: "pointer"
                },
                padding: 0.5,
                userSelect: "none"
            },
            children: "…"
        })
    });
};

var createTypeRegistryStore = function() {
    return createStore()(function(set) {
        return {
            registry: [],
            registerTypes: function(setState) {
                set(function(state) {
                    return {
                        registry: typeof setState === "function" ? setState(state.registry) : setState
                    };
                });
            }
        };
    });
};
// @ts-expect-error we intentionally want to pass undefined to the context
// See https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24509#issuecomment-382213106
var TypeRegistryStoreContext = /*#__PURE__*/ createContext(undefined);
TypeRegistryStoreContext.Provider;
var useTypeRegistryStore = function(selector, equalityFn) {
    var store = useContext(TypeRegistryStoreContext);
    return useStore(store, selector, equalityFn);
};
var objectType = {
    is: function(value) {
        return typeof value === "object";
    },
    Component: ObjectType,
    PreComponent: PreObjectType,
    PostComponent: PostObjectType
};
function matchTypeComponents(value, path, registry) {
    var potential;
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = registry[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var T = _step.value;
            if (T.is(value, path)) {
                potential = T;
                if (typeof value === "object") {
                    // early return for case like `null`
                    return T;
                }
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    if (potential === undefined) {
        if (typeof value === "object") {
            return objectType;
        }
        throw new Error("this is not possible");
    }
    return potential;
}
function useTypeComponents(value, path) {
    var registry = useTypeRegistryStore(function(store) {
        return store.registry;
    });
    return useMemo(function() {
        return matchTypeComponents(value, path, registry);
    }, [
        value,
        path,
        registry
    ]);
}
function predefined() {
    var registerType = function registerType(dataType) {
        function compare(prevProps, nextProps) {
            var _prevProps_path, _nextProps_path;
            return Object.is(prevProps.value, nextProps.value) && prevProps.inspect && nextProps.inspect && ((_prevProps_path = prevProps.path) === null || _prevProps_path === void 0 ? void 0 : _prevProps_path.join(".")) === ((_nextProps_path = nextProps.path) === null || _nextProps_path === void 0 ? void 0 : _nextProps_path.join("."));
        }
        dataType.Component = /*#__PURE__*/ memo(dataType.Component, compare);
        if (dataType.Editor) {
            dataType.Editor = /*#__PURE__*/ memo(dataType.Editor, function compare(prevProps, nextProps) {
                return Object.is(prevProps.value, nextProps.value);
            });
        }
        if (dataType.PreComponent) {
            dataType.PreComponent = /*#__PURE__*/ memo(dataType.PreComponent, compare);
        }
        if (dataType.PostComponent) {
            dataType.PostComponent = /*#__PURE__*/ memo(dataType.PostComponent, compare);
        }
        types.push(dataType);
    };
    var types = [];
    registerType(_object_spread({
        is: function(value) {
            return typeof value === "boolean";
        }
    }, createEasyType("bool", function(param) {
        var value = param.value;
        return /*#__PURE__*/ jsx(Fragment, {
            children: value ? "true" : "false"
        });
    }, {
        colorKey: "base0E",
        fromString: function(value) {
            return Boolean(value);
        }
    })));
    var displayOptions = {
        weekday: "short",
        year: "numeric",
        month: "short",
        day: "numeric",
        hour: "2-digit",
        minute: "2-digit"
    };
    registerType(_object_spread({
        is: function(value) {
            return _instanceof(value, Date);
        }
    }, createEasyType("date", function(param) {
        var value = param.value;
        return /*#__PURE__*/ jsx(Fragment, {
            children: value.toLocaleTimeString("en-us", displayOptions)
        });
    }, {
        colorKey: "base0D"
    })));
    registerType(_object_spread({
        is: function(value) {
            return value === null;
        }
    }, createEasyType("null", function() {
        var backgroundColor = useJsonViewerStore(function(store) {
            return store.colorspace.base02;
        });
        return /*#__PURE__*/ jsx(Box, {
            sx: {
                fontSize: "0.8rem",
                backgroundColor: backgroundColor,
                fontWeight: "bold",
                borderRadius: "3px",
                padding: "0.5px 2px"
            },
            children: "NULL"
        });
    }, {
        colorKey: "base08",
        displayTypeLabel: false
    })));
    registerType(_object_spread({
        is: function(value) {
            return value === undefined;
        }
    }, createEasyType("undefined", function() {
        var backgroundColor = useJsonViewerStore(function(store) {
            return store.colorspace.base02;
        });
        return /*#__PURE__*/ jsx(Box, {
            sx: {
                fontSize: "0.7rem",
                backgroundColor: backgroundColor,
                borderRadius: "3px",
                padding: "0.5px 2px"
            },
            children: "undefined"
        });
    }, {
        colorKey: "base05",
        displayTypeLabel: false
    })));
    registerType(_object_spread({
        is: function(value) {
            return typeof value === "string";
        }
    }, createEasyType("string", function(props) {
        var _useState = _sliced_to_array(useState(false), 2), showRest = _useState[0], setShowRest = _useState[1];
        var collapseStringsAfterLength = useJsonViewerStore(function(store) {
            return store.collapseStringsAfterLength;
        });
        var value = showRest ? props.value : props.value.slice(0, collapseStringsAfterLength);
        var hasRest = props.value.length > collapseStringsAfterLength;
        return /*#__PURE__*/ jsxs(Box, {
            component: "span",
            sx: {
                overflowWrap: "anywhere",
                cursor: hasRest ? "pointer" : "inherit"
            },
            onClick: function() {
                if (hasRest) {
                    setShowRest(function(value) {
                        return !value;
                    });
                }
            },
            children: [
                '"',
                value,
                hasRest && !showRest && /*#__PURE__*/ jsx(Box, {
                    component: "span",
                    sx: {
                        padding: 0.5
                    },
                    children: "…"
                }),
                '"'
            ]
        });
    }, {
        colorKey: "base09",
        fromString: function(value) {
            return value;
        }
    })));
    registerType({
        is: function(value) {
            return typeof value === "function";
        },
        Component: FunctionType,
        PreComponent: PreFunctionType,
        PostComponent: PostFunctionType
    });
    var isInt = function(n) {
        return n % 1 === 0;
    };
    registerType(_object_spread({
        is: function(value) {
            return typeof value === "number" && isNaN(value);
        }
    }, createEasyType("NaN", function() {
        var backgroundColor = useJsonViewerStore(function(store) {
            return store.colorspace.base02;
        });
        return /*#__PURE__*/ jsx(Box, {
            sx: {
                backgroundColor: backgroundColor,
                fontSize: "0.8rem",
                fontWeight: "bold",
                borderRadius: "3px"
            },
            children: "NaN"
        });
    }, {
        colorKey: "base08",
        displayTypeLabel: false
    })));
    registerType(_object_spread({
        is: function(value) {
            return typeof value === "number" && !isInt(value);
        }
    }, createEasyType("float", function(param) {
        var value = param.value;
        return /*#__PURE__*/ jsx(Fragment, {
            children: value
        });
    }, {
        colorKey: "base0B",
        fromString: function(value) {
            return parseFloat(value);
        }
    })));
    registerType(_object_spread({
        is: function(value) {
            return typeof value === "number" && isInt(value);
        }
    }, createEasyType("int", function(param) {
        var value = param.value;
        return /*#__PURE__*/ jsx(Fragment, {
            children: value
        });
    }, {
        colorKey: "base0F",
        fromString: function(value) {
            return parseInt(value);
        }
    })));
    registerType(_object_spread({
        is: function(value) {
            return (typeof value === "undefined" ? "undefined" : _type_of(value)) === "bigint";
        }
    }, createEasyType("bigint", function(param) {
        var value = param.value;
        return /*#__PURE__*/ jsx(Fragment, {
            children: "".concat(value, "n")
        });
    }, {
        colorKey: "base0F",
        fromString: function(value) {
            return BigInt(value.replace(/\D/g, ""));
        }
    })));
    return types;
}

var IconBox = function(props) {
    return /*#__PURE__*/ jsx(Box, _object_spread_props(_object_spread({
        component: "span"
    }, props), {
        sx: _object_spread({
            cursor: "pointer",
            paddingLeft: "0.7rem"
        }, props.sx)
    }));
};
var DataKeyPair = function(props) {
    var value = props.value, prevValue = props.prevValue, path = props.path, nestedIndex = props.nestedIndex;
    var _props_editable;
    var propsEditable = (_props_editable = props.editable) !== null && _props_editable !== void 0 ? _props_editable : undefined;
    var storeEditable = useJsonViewerStore(function(store) {
        return store.editable;
    });
    var editable = useMemo(function() {
        if (storeEditable === false) {
            return false;
        }
        if (propsEditable === false) {
            // props.editable is false which means we cannot provide the suitable way to edit it
            return false;
        }
        if (typeof storeEditable === "function") {
            return !!storeEditable(path, value);
        }
        return storeEditable;
    }, [
        path,
        propsEditable,
        storeEditable,
        value
    ]);
    var _useState = _sliced_to_array(useState(typeof value === "function" ? function() {
        return value;
    } : value), 2), tempValue = _useState[0], setTempValue = _useState[1];
    var depth = path.length;
    var key = path[depth - 1];
    var hoverPath = useJsonViewerStore(function(store) {
        return store.hoverPath;
    });
    var isHover = useMemo(function() {
        return hoverPath && path.every(function(value, index) {
            return value === hoverPath.path[index] && nestedIndex === hoverPath.nestedIndex;
        });
    }, [
        hoverPath,
        path,
        nestedIndex
    ]);
    var setHover = useJsonViewerStore(function(store) {
        return store.setHover;
    });
    var root = useJsonViewerStore(function(store) {
        return store.value;
    });
    var _useInspect = _sliced_to_array(useInspect(path, value, nestedIndex), 2), inspect = _useInspect[0], setInspect = _useInspect[1];
    var _useState1 = _sliced_to_array(useState(false), 2), editing = _useState1[0], setEditing = _useState1[1];
    var onChange = useJsonViewerStore(function(store) {
        return store.onChange;
    });
    var keyColor = useTextColor();
    var numberKeyColor = useJsonViewerStore(function(store) {
        return store.colorspace.base0C;
    });
    var highlightColor = useJsonViewerStore(function(store) {
        return store.colorspace.base0A;
    });
    var _useTypeComponents = useTypeComponents(value, path), Component = _useTypeComponents.Component, PreComponent = _useTypeComponents.PreComponent, PostComponent = _useTypeComponents.PostComponent, Editor = _useTypeComponents.Editor;
    var quotesOnKeys = useJsonViewerStore(function(store) {
        return store.quotesOnKeys;
    });
    var rootName = useJsonViewerStore(function(store) {
        return store.rootName;
    });
    var isRoot = root === value;
    var isNumberKey = Number.isInteger(Number(key));
    var enableClipboard = useJsonViewerStore(function(store) {
        return store.enableClipboard;
    });
    var _useClipboard = useClipboard(), copy = _useClipboard.copy, copied = _useClipboard.copied;
    var highlightUpdates = useJsonViewerStore(function(store) {
        return store.highlightUpdates;
    });
    var isHighlight = useMemo(function() {
        if (!highlightUpdates || prevValue === undefined) return false;
        // highlight if value type changed
        if ((typeof value === "undefined" ? "undefined" : _type_of(value)) !== (typeof prevValue === "undefined" ? "undefined" : _type_of(prevValue))) {
            return true;
        }
        if (typeof value === "number") {
            // notice: NaN !== NaN
            if (isNaN(value) && isNaN(prevValue)) return false;
            return value !== prevValue;
        }
        // highlight if isArray changed
        if (Array.isArray(value) !== Array.isArray(prevValue)) {
            return true;
        }
        // not highlight object/function
        // deep compare they will be slow
        if (typeof value === "object" || typeof value === "function") {
            return false;
        }
        // highlight if not equal
        if (value !== prevValue) {
            return true;
        }
        return false;
    }, [
        highlightUpdates,
        prevValue,
        value
    ]);
    var highlightContainer = useRef();
    useEffect(function() {
        if (highlightContainer.current && isHighlight && "animate" in highlightContainer.current) {
            highlightContainer.current.animate([
                {
                    backgroundColor: highlightColor
                },
                {
                    backgroundColor: ""
                }
            ], {
                duration: 1000,
                easing: "ease-in"
            });
        }
    }, [
        highlightColor,
        isHighlight,
        prevValue,
        value
    ]);
    var actionIcons = useMemo(function() {
        if (editing) {
            return /*#__PURE__*/ jsxs(Fragment, {
                children: [
                    /*#__PURE__*/ jsx(IconBox, {
                        children: /*#__PURE__*/ jsx(CloseIcon, {
                            sx: {
                                fontSize: ".8rem"
                            },
                            onClick: function() {
                                // abort editing
                                setEditing(false);
                                setTempValue(value);
                            }
                        })
                    }),
                    /*#__PURE__*/ jsx(IconBox, {
                        children: /*#__PURE__*/ jsx(CheckIcon, {
                            sx: {
                                fontSize: ".8rem"
                            },
                            onClick: function() {
                                // finish editing, save data
                                setEditing(false);
                                onChange(path, value, tempValue);
                            }
                        })
                    })
                ]
            });
        }
        return /*#__PURE__*/ jsxs(Fragment, {
            children: [
                enableClipboard && /*#__PURE__*/ jsx(IconBox, {
                    onClick: function(event) {
                        event.preventDefault();
                        try {
                            copy(path, value, copyString);
                        } catch (e) {
                            // in some case, this will throw error
                            // fixme: `useAlert` hook
                            console.error(e);
                        }
                    },
                    children: copied ? /*#__PURE__*/ jsx(CheckIcon, {
                        sx: {
                            fontSize: ".8rem"
                        }
                    }) : /*#__PURE__*/ jsx(ContentCopyIcon, {
                        sx: {
                            fontSize: ".8rem"
                        }
                    })
                }),
                Editor && editable && /*#__PURE__*/ jsx(IconBox, {
                    onClick: function(event) {
                        event.preventDefault();
                        setEditing(true);
                        setTempValue(value);
                    },
                    children: /*#__PURE__*/ jsx(EditIcon, {
                        sx: {
                            fontSize: ".8rem"
                        }
                    })
                })
            ]
        });
    }, [
        Editor,
        copied,
        copy,
        editable,
        editing,
        enableClipboard,
        onChange,
        path,
        tempValue,
        value
    ]);
    var isEmptyValue = useMemo(function() {
        return getValueSize(value) === 0;
    }, [
        value
    ]);
    var expandable = !isEmptyValue && !!(PreComponent && PostComponent);
    var KeyRenderer = useJsonViewerStore(function(store) {
        return store.keyRenderer;
    });
    var downstreamProps = useMemo(function() {
        return {
            path: path,
            inspect: inspect,
            setInspect: setInspect,
            value: value,
            prevValue: prevValue
        };
    }, [
        inspect,
        path,
        setInspect,
        value,
        prevValue
    ]);
    return /*#__PURE__*/ jsxs(Box, {
        className: "data-key-pair",
        "data-testid": "data-key-pair" + path.join("."),
        sx: {
            userSelect: "text"
        },
        onMouseEnter: useCallback(function() {
            return setHover(path, nestedIndex);
        }, [
            setHover,
            path,
            nestedIndex
        ]),
        children: [
            /*#__PURE__*/ jsxs(DataBox, {
                component: "span",
                className: "data-key",
                sx: {
                    lineHeight: 1.5,
                    color: keyColor,
                    letterSpacing: 0.5,
                    opacity: 0.8
                },
                onClick: useCallback(function(event) {
                    if (event.isDefaultPrevented()) {
                        return;
                    }
                    if (!isEmptyValue) {
                        setInspect(function(state) {
                            return !state;
                        });
                    }
                }, [
                    isEmptyValue,
                    setInspect
                ]),
                children: [
                    expandable ? inspect ? /*#__PURE__*/ jsx(ExpandMoreIcon, {
                        sx: {
                            fontSize: ".8rem",
                            "&:hover": {
                                cursor: "pointer"
                            }
                        }
                    }) : /*#__PURE__*/ jsx(ChevronRightIcon, {
                        sx: {
                            fontSize: ".8rem",
                            "&:hover": {
                                cursor: "pointer"
                            }
                        }
                    }) : null,
                    /*#__PURE__*/ jsx(Box, {
                        ref: highlightContainer,
                        component: "span",
                        children: isRoot ? rootName !== false ? quotesOnKeys ? /*#__PURE__*/ jsxs(Fragment, {
                            children: [
                                '"',
                                rootName,
                                '"'
                            ]
                        }) : /*#__PURE__*/ jsx(Fragment, {
                            children: rootName
                        }) : null : KeyRenderer.when(downstreamProps) ? /*#__PURE__*/ jsx(KeyRenderer, _object_spread({}, downstreamProps)) : nestedIndex === undefined && (isNumberKey ? /*#__PURE__*/ jsx(Box, {
                            component: "span",
                            style: {
                                color: numberKeyColor
                            },
                            children: key
                        }) : quotesOnKeys ? /*#__PURE__*/ jsxs(Fragment, {
                            children: [
                                '"',
                                key,
                                '"'
                            ]
                        }) : /*#__PURE__*/ jsx(Fragment, {
                            children: key
                        }))
                    }),
                    isRoot ? rootName !== false && /*#__PURE__*/ jsx(DataBox, {
                        sx: {
                            mr: 0.5
                        },
                        children: ":"
                    }) : nestedIndex === undefined && /*#__PURE__*/ jsx(DataBox, {
                        sx: {
                            mr: 0.5
                        },
                        children: ":"
                    }),
                    PreComponent && /*#__PURE__*/ jsx(PreComponent, _object_spread({}, downstreamProps)),
                    isHover && expandable && inspect && actionIcons
                ]
            }),
            editing && editable ? Editor && /*#__PURE__*/ jsx(Editor, {
                value: tempValue,
                setValue: setTempValue
            }) : Component ? /*#__PURE__*/ jsx(Component, _object_spread({}, downstreamProps)) : /*#__PURE__*/ jsx(Box, {
                component: "span",
                className: "data-value-fallback",
                children: "fallback: ".concat(value)
            }),
            PostComponent && /*#__PURE__*/ jsx(PostComponent, _object_spread({}, downstreamProps)),
            isHover && expandable && !inspect && actionIcons,
            isHover && !expandable && actionIcons
        ]
    });
};

var query = "(prefers-color-scheme: dark)";
function useThemeDetector() {
    var _useState = _sliced_to_array(useState(false), 2), isDark = _useState[0], setIsDark = _useState[1];
    useEffect(function() {
        var listener = function(e) {
            setIsDark(e.matches);
        };
        setIsDark(window.matchMedia(query).matches);
        var queryMedia = window.matchMedia(query);
        queryMedia.addEventListener("change", listener);
        return function() {
            return queryMedia.removeEventListener("change", listener);
        };
    }, []);
    return isDark;
}

/**
 * @internal
 */ function useSetIfNotUndefinedEffect(key, value) {
    var setState = useContext(JsonViewerStoreContext).setState;
    useEffect(function() {
        if (value !== undefined) {
            setState(_define_property({}, key, value));
        }
    }, [
        key,
        value,
        setState
    ]);
}
/**
 * @internal
 */ var JsonViewerInner = function(props) {
    var setState = useContext(JsonViewerStoreContext).setState;
    useEffect(function() {
        setState(function(state) {
            return {
                prevValue: state.value,
                value: props.value
            };
        });
    }, [
        props.value,
        setState
    ]);
    useSetIfNotUndefinedEffect("editable", props.editable);
    useSetIfNotUndefinedEffect("indentWidth", props.indentWidth);
    useSetIfNotUndefinedEffect("onChange", props.onChange);
    useSetIfNotUndefinedEffect("groupArraysAfterLength", props.groupArraysAfterLength);
    useSetIfNotUndefinedEffect("keyRenderer", props.keyRenderer);
    useSetIfNotUndefinedEffect("maxDisplayLength", props.maxDisplayLength);
    useSetIfNotUndefinedEffect("enableClipboard", props.enableClipboard);
    useSetIfNotUndefinedEffect("highlightUpdates", props.highlightUpdates);
    useSetIfNotUndefinedEffect("rootName", props.rootName);
    useSetIfNotUndefinedEffect("displayDataTypes", props.displayDataTypes);
    useSetIfNotUndefinedEffect("displayObjectSize", props.displayObjectSize);
    useSetIfNotUndefinedEffect("onCopy", props.onCopy);
    useSetIfNotUndefinedEffect("onSelect", props.onSelect);
    useEffect(function() {
        if (props.theme === "light") {
            setState({
                colorspace: lightColorspace
            });
        } else if (props.theme === "dark") {
            setState({
                colorspace: darkColorspace
            });
        } else if (typeof props.theme === "object") {
            setState({
                colorspace: props.theme
            });
        }
    }, [
        setState,
        props.theme
    ]);
    var themeCls = useMemo(function() {
        if (typeof props.theme === "object") return "json-viewer-theme-custom";
        return props.theme === "dark" ? "json-viewer-theme-dark" : "json-viewer-theme-light";
    }, [
        props.theme
    ]);
    var onceRef = useRef(true);
    var predefinedTypes = useMemo(function() {
        return predefined();
    }, []);
    var registerTypes = useTypeRegistryStore(function(store) {
        return store.registerTypes;
    });
    if (onceRef.current) {
        var allTypes = props.valueTypes ? _to_consumable_array(predefinedTypes).concat(_to_consumable_array(props.valueTypes)) : _to_consumable_array(predefinedTypes);
        registerTypes(allTypes);
        onceRef.current = false;
    }
    useEffect(function() {
        var allTypes = props.valueTypes ? _to_consumable_array(predefinedTypes).concat(_to_consumable_array(props.valueTypes)) : _to_consumable_array(predefinedTypes);
        registerTypes(allTypes);
    }, [
        props.valueTypes,
        predefinedTypes,
        registerTypes
    ]);
    var value = useJsonViewerStore(function(store) {
        return store.value;
    });
    var prevValue = useJsonViewerStore(function(store) {
        return store.prevValue;
    });
    var setHover = useJsonViewerStore(function(store) {
        return store.setHover;
    });
    var onMouseLeave = useCallback(function() {
        return setHover(null);
    }, [
        setHover
    ]);
    return /*#__PURE__*/ jsx(Paper, {
        elevation: 0,
        className: clsx(themeCls, props.className),
        style: props.style,
        sx: _object_spread({
            fontFamily: "monospace",
            userSelect: "none",
            contentVisibility: "auto"
        }, props.sx),
        onMouseLeave: onMouseLeave,
        children: /*#__PURE__*/ jsx(DataKeyPair, {
            value: value,
            prevValue: prevValue,
            path: useMemo(function() {
                return [];
            }, [])
        })
    });
};
var JsonViewer = function JsonViewer(props) {
    var isAutoDarkTheme = useThemeDetector();
    var _props_theme;
    var themeType = useMemo(function() {
        return props.theme === "auto" ? isAutoDarkTheme ? "light" : "dark" : (_props_theme = props.theme) !== null && _props_theme !== void 0 ? _props_theme : "light";
    }, [
        isAutoDarkTheme,
        props.theme
    ]);
    var theme = useMemo(function() {
        var backgroundColor = typeof themeType === "object" ? themeType.base00 : themeType === "dark" ? darkColorspace.base00 : lightColorspace.base00;
        return createTheme({
            components: {
                MuiPaper: {
                    styleOverrides: {
                        root: {
                            backgroundColor: backgroundColor
                        }
                    }
                }
            },
            palette: {
                mode: themeType === "dark" ? "dark" : "light",
                background: {
                    default: backgroundColor
                }
            }
        });
    }, [
        themeType
    ]);
    var mixedProps = _object_spread_props(_object_spread({}, props), {
        theme: themeType
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
    var jsonViewerStore = useMemo(function() {
        return createJsonViewerStore(props);
    }, []);
    var typeRegistryStore = useMemo(function() {
        return createTypeRegistryStore();
    }, []);
    return /*#__PURE__*/ jsx(ThemeProvider, {
        theme: theme,
        children: /*#__PURE__*/ jsx(TypeRegistryStoreContext.Provider, {
            value: typeRegistryStore,
            children: /*#__PURE__*/ jsx(JsonViewerStoreContext.Provider, {
                value: jsonViewerStore,
                children: /*#__PURE__*/ jsx(JsonViewerInner, _object_spread({}, mixedProps))
            })
        })
    });
};

export { JsonViewer, applyValue, createDataType, darkColorspace, isCycleReference, lightColorspace, safeStringify };
